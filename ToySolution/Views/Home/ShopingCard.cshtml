 @model List<BasketItem>
    @{
        ViewData["Title"] = "ShopingCard";
    }




    <table style="margin-top:10%;" class="table">
        <thead>
            <tr>
                <th class="product-image">
                    Image

                </th>
                <th class="product-details">
                    Name
                </th>
                <th class="product-price">
                    Price
                </th>


                <th class="product-quantity">
                    Quality
                </th>


                <th class="product-line-price">
                    Total
                </th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="product">
                    <td class="product-image">
                        <img style="width:60px" src="~/uploads/images/@item.ImagePath" />
                    </td>
                    <td>
                       @item.Name
                    </td>
                    <td class="product-price">
                       @item.Price.ToString("$0.00")
                    </td>
                    <td class="product-quantity">
                        <input style="width:40px" min="@item.Count" value="@item.Count" type="number" />
                    </td>

                    <td class="product-line-price">
                        @item.Amount.ToString("$0.00")

                    </td>
                    <td class="product-removal">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </td>





                </tr>
            }



        </tbody>

    </table>
    <div class="totals">
        <div style="display:flex;flex-direction:column;align-items:flex-end;margin-right: 83px" class="totals-item">
            <label>Subtotal</label>
            <div class="totals-value" id="cart-subtotal">71.97</div>
        </div>



    </div>


    @*@section addjs{
            <script>
                var taxRate = 0.05;
                var shippingRate = 15.00;
                var fadeTime = 300;


                /* Assign actions */
                $('.product-quantity input').change(function () {
                    updateQuantity(this);
                });

                $('.product-removal svg').click(function () {
                    removeItem(this);
                });


                /* Recalculate cart */
                function recalculateCart() {
                    var subtotal = 0;

                    /* Sum up row totals */
                    $('.product').each(function () {
                        subtotal += parseFloat($(this).children('.product-line-price').text());
                    });

                    /* Calculate totals */
                    var tax = subtotal * taxRate;
                    var shipping = (subtotal > 0 ? shippingRate : 0);
                    var total = subtotal + tax + shipping;

                    /* Update totals display */
                    $('.totals-value').fadeOut(fadeTime, function () {
                        $('#cart-subtotal').html(subtotal.toFixed(2));


                        $('.totals-value').fadeIn(fadeTime);
                    });
                }


                /* Update quantity */
                function updateQuantity(quantityInput) {
                    /* Calculate line price */
                    var productRow = $(quantityInput).parent().parent();
                    var price = parseFloat(productRow.children('.product-price').text());
                    var quantity = $(quantityInput).val();
                    var linePrice = price * quantity;

                    /* Update line price display and recalc cart totals */
                    productRow.children('.product-line-price').each(function () {
                        $(this).fadeOut(fadeTime, function () {
                            $(this).text(linePrice.toFixed(2));
                            recalculateCart();
                            $(this).fadeIn(fadeTime);
                        });
                    });
                }


                /* Remove item from cart */
                function removeItem(removeButton) {
                    /* Remove row from DOM and recalc cart total */
                    var productRow = $(removeButton).parent().parent();
                    productRow.slideUp(fadeTime, function () {
                        productRow.remove();
                        recalculateCart();
                    });
                }
            </script>
        }*@
